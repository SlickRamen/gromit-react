const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const fs = require('fs');
const path = require('path');
const webfont = require('webfont').default;
const os = require('os');

const app = express();
const PORT = 4000;

app.use(cors());
app.use(express.json());


app.use(bodyParser.json({ limit: '50mb' }));

app.use(express.static(path.join(__dirname, 'public')));


app.post('/api/generate-font', async (req, res) => {
  const project = req.body;

  try {
    generateFont(req, res, project);
    res.status(200).send({ message: 'Font generated successfully' });
  } catch (error) {
    console.error('Error generating font:', error);
    res.status(500).send({ error: 'Error generating font' });
  }
});

function generateFont(req, res, project) {
  const dump = path.join(__dirname, `../temp/${project.name}-grom`);
  if (!fs.existsSync(dump)) {
    fs.mkdirSync(dump);
  } else {
    fs.readdir(dump, (err, files) => {
    if (err) {
      return;
    }

    for (const file of files) {
      const filePath = path.join(dump, file);
      fs.unlink(filePath, (err) => {
        if (err) console.error(`Failed to delete ${file}:`, err);
      });
    }
  });
  }

  const iconsMap = project.icons
    .map((icon) => {
      const base64Data = icon.data.replace(/^data:image\/svg\+xml;base64,/, "");
      const svgBuffer = Buffer.from(base64Data, "base64");

      const name = icon.name.replace(".svg", "");
      return { name, svgBuffer };
    })
    .sort((a, b) => a.name.localeCompare(b.name));


  const iconPaths = iconsMap.map(({ name, svgBuffer }) => {
    const svgData = svgBuffer.toString("utf-8");
    const filePath = path.join(dump, `${name}.svg`);
    fs.writeFileSync(filePath, svgData);
    return filePath;
  });

  console.log("Generated SVG Paths:", fs.readdirSync(dump));

  const outputPath = path.join(__dirname, `../output/${project.name}-grom`);
  console.log("Expected Output Path:", outputPath);

  if (!fs.existsSync(outputPath)) {
    fs.mkdirSync(outputPath, { recursive: true });
  }

  const fontName = `${project.name}-grom`;
  const unicodeStart = 0xe900;
  const codepoints = {};
  iconPaths.forEach((path, index) => {
    const name = path.split("/").pop().replace(".svg", "");
    codepoints[name] = unicodeStart + index;
  });

  webfont({
    files: path.join(dump, "*.svg").replace(/\\/g, "/"),
    fontName: fontName,
    formats: ["woff", "woff2", "ttf"],
    dest: outputPath,
    prependUnicode: true,
    normalize: true,
    centerHorizontally: true,
    startUnicode: unicodeStart,
    glyphTransformFn: (obj) => obj,
    codepoints: codepoints,
  })
    .then((result) => {
      console.log("Font generated successfully!");

      const fontFiles = {
        woff: result.woff,
        woff2: result.woff2,
        ttf: result.ttf,
      };

      for (const [format, buffer] of Object.entries(fontFiles)) {
        if (buffer) {
          const filePath = path.join(outputPath, `${fontName}.${format}`);
          fs.writeFileSync(filePath, buffer);
          console.log(`${format.toUpperCase()} file saved at: ${filePath}`);
        }
      }

      // Generate the CSS file
      let cssContent = `/*
  Iconfont generated by Gromit
  {https://github.com/SlickRamen/gromit}
  Made by Martyn Gascoigne (2025)
*/

@font-face {
  font-family: '${fontName}';
  src: url('${fontName}.woff2') format('woff2'),
        url('${fontName}.woff') format('woff'),
        url('${fontName}.ttf') format('truetype');
  font-weight: normal;
  font-style: normal;
}

[class^="icon-"], [class*=" icon-"] {
  font-family: '${fontName}' !important;
  speak: never;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 0;

  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.use-line-height {
  line-height: 1;
}
`;

      let unicodeStart = 0xe900; // Start Unicode range
      iconsMap.forEach(({ name }, index) => {
        const unicode = `\\${(unicodeStart + index).toString(16)}`;
        cssContent += `\n.icon-${name}:before { content: "${unicode}"; }`;
      });

      const cssFilePath = path.join(outputPath, `${fontName}.css`);
      fs.writeFileSync(cssFilePath, cssContent);
      console.log(`CSS file saved at: ${cssFilePath}`);
    })
    .catch((error) => {
      console.error("Error generating font:", error);
    });
}

// Start server
app.listen(PORT, () => {
  console.log(`Backend running at http://localhost:${PORT}`);
});
